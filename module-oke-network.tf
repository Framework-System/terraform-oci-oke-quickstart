# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.
# 

module "vcn" {
  source = "./modules/oci-networking/modules/vcn"

  # Oracle Cloud Infrastructure Tenancy and Compartment OCID
  compartment_ocid = local.vcn_compartment_ocid

  # Deployment Tags + Freeform Tags + Defined Tags
  vcn_tags = local.oci_tag_values

  # Virtual Cloud Network (VCN) arguments
  create_new_vcn          = true # var.create_new_oke_cluster
  existent_vcn_ocid       = var.existent_vcn_ocid
  cidr_blocks             = local.vcn_cidr_blocks
  display_name            = "[${local.app_name}] VCN for OKE (${local.deploy_id})"
  dns_label               = "${local.app_name_for_dns}${local.deploy_id}"
  is_ipv6enabled          = var.is_ipv6enabled
  ipv6private_cidr_blocks = var.ipv6private_cidr_blocks
}

module "subnets" {
  for_each = { for map in local.subnets : map.subnet_name => map }
  source   = "./modules/oci-networking/modules/subnet"

  # Oracle Cloud Infrastructure Tenancy and Compartment OCID
  compartment_ocid = local.vcn_compartment_ocid
  vcn_id           = module.vcn.vcn_id

  # Deployment Tags + Freeform Tags + Defined Tags
  subnet_tags = local.oci_tag_values

  # Subnet arguments
  subnet_name                = each.value.subnet_name
  create_subnet              = each.value.create_subnet
  cidr_block                 = each.value.cidr_block
  display_name               = each.value.display_name # If null, is autogenerated
  dns_label                  = each.value.dns_label    # If null, is autogenerated
  prohibit_public_ip_on_vnic = each.value.prohibit_public_ip_on_vnic
  prohibit_internet_ingress  = each.value.prohibit_internet_ingress
  route_table_id             = each.value.route_table_id    # If null, the VCN's default route table is used
  dhcp_options_id            = each.value.dhcp_options_id   # If null, the VCN's default set of DHCP options is used
  security_list_ids          = each.value.security_list_ids # If null, the VCN's default security list is used
  ipv6cidr_block             = each.value.ipv6cidr_block    # If null, no IPv6 CIDR block is assigned
}

locals {
  subnets = concat(local.subnets_oke, local.subnet_vcn_native_pod_networking, local.subnet_fss_mount_targets)
  subnets_oke = [
    {
      subnet_name                = "oke_k8s_endpoint_subnet"
      create_subnet              = true
      cidr_block                 = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR") # cidrsubnet(local.vcn_cidr_blocks[0], 12, 0) # e.g.: "10.20.0.0/28" = 15 usable IPs
      display_name               = "OKE K8s Endpoint subnet (${local.deploy_id})"
      dns_label                  = "okek8s${local.deploy_id}"
      prohibit_public_ip_on_vnic = (var.cluster_endpoint_visibility == "Private") ? true : false
      prohibit_internet_ingress  = (var.cluster_endpoint_visibility == "Private") ? true : false
      route_table_id             = (var.cluster_endpoint_visibility == "Private") ? module.route_tables["private"].route_table_id : module.route_tables["public"].route_table_id
      dhcp_options_id            = module.vcn.default_dhcp_options_id
      security_list_ids          = null
      #   security_list_ids          = [module.security_lists.oke_endpoint_security_list_id]
      ipv6cidr_block = null
    },
    {
      subnet_name                = "oke_nodes_subnet"
      create_subnet              = true
      cidr_block                 = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR") # cidrsubnet(local.vcn_cidr_blocks[0], 6, 3) # e.g.: "10.20.12.0/22" = 1021 usable IPs (10.20.12.0 - 10.20.15.255)
      display_name               = "OKE Nodes subnet (${local.deploy_id})"
      dns_label                  = "okenodes${local.deploy_id}"
      prohibit_public_ip_on_vnic = (var.cluster_workers_visibility == "Private") ? true : false
      prohibit_internet_ingress  = (var.cluster_workers_visibility == "Private") ? true : false
      route_table_id             = (var.cluster_workers_visibility == "Private") ? module.route_tables["private"].route_table_id : module.route_tables["public"].route_table_id
      dhcp_options_id            = module.vcn.default_dhcp_options_id
      security_list_ids          = null
      #   security_list_ids          = [module.security_lists.oke_nodes_security_list]
      ipv6cidr_block = null
    },
    {
      subnet_name                = "oke_lb_subnet"
      create_subnet              = true
      cidr_block                 = lookup(local.network_cidrs, "LB-REGIONAL-SUBNET-CIDR") #cidrsubnet(local.vcn_cidr_blocks[0], 6, 4) # e.g.: "10.20.16.0/22" = 1021 usable IPs (10.20.16.0 - 10.20.19.255)
      display_name               = "OKE LoadBalancers subnet (${local.deploy_id})"
      dns_label                  = "okelb${local.deploy_id}"
      prohibit_public_ip_on_vnic = (var.cluster_load_balancer_visibility == "Private") ? true : false
      prohibit_internet_ingress  = (var.cluster_load_balancer_visibility == "Private") ? true : false
      route_table_id             = (var.cluster_load_balancer_visibility == "Private") ? module.route_tables["private"].route_table_id : module.route_tables["public"].route_table_id
      dhcp_options_id            = module.vcn.default_dhcp_options_id
      security_list_ids          = null
      #   security_list_ids          = [module.security_lists.oke_lb_security_list]
      ipv6cidr_block = null
    }
  ]
  subnet_vcn_native_pod_networking = [] # 10.20.128.0/17 (1,1) = 32766 usable IPs (10.20.128.0 - 10.20.255.255)
  subnet_fss_mount_targets         = [] # 10.20.20.64/26 (10,81) = 62 usable IPs (10.20.20.64 - 10.20.20.255)
}

module "gateways" {
  source = "./modules/oci-networking/modules/gateways"

  # Oracle Cloud Infrastructure Tenancy and Compartment OCID
  compartment_ocid = local.vcn_compartment_ocid
  vcn_id           = module.vcn.vcn_id

  # Deployment Tags + Freeform Tags + Defined Tags
  gateways_tags = local.oci_tag_values

  # Internet Gateway
  create_internet_gateway       = true
  internet_gateway_display_name = "Internet Gateway (${local.deploy_id})"
  internet_gateway_enabled      = true

  # NAT Gateway
  create_nat_gateway       = true
  nat_gateway_display_name = "NAT Gateway (${local.deploy_id})"
  nat_gateway_public_ip_id = null

  # Service Gateway
  create_service_gateway       = true
  service_gateway_display_name = "Service Gateway (${local.deploy_id})"

  # Local Peering Gateway (LPG)
  create_local_peering_gateway       = false
  local_peering_gateway_display_name = "Local Peering Gateway (${local.deploy_id})"
  local_peering_gateway_peer_id      = null
}

module "route_tables" {
  for_each = { for map in local.route_tables : map.route_table_name => map }
  source   = "./modules/oci-networking/modules/route_table"

  # Oracle Cloud Infrastructure Tenancy and Compartment OCID
  compartment_ocid = local.vcn_compartment_ocid
  vcn_id           = module.vcn.vcn_id

  # Deployment Tags + Freeform Tags + Defined Tags
  route_table_tags = local.oci_tag_values

  # Route Table attributes
  route_table_name   = each.value.route_table_name
  create_route_table = each.value.create_route_table
  display_name       = each.value.display_name
  route_rules        = each.value.route_rules
}

locals {
  route_tables = concat(local.route_tables_oke)
  route_tables_oke = [
    {
      route_table_name   = "private"
      create_route_table = true
      display_name       = "OKE Private Route Table (${local.deploy_id})"
      route_rules = [
        {
          description       = "Traffic to the internet"
          destination       = lookup(local.network_cidrs, "ALL-CIDR")
          destination_type  = "CIDR_BLOCK"
          network_entity_id = module.gateways.nat_gateway_id
        },
        {
          description       = "Traffic to OCI services"
          destination       = lookup(data.oci_core_services.all_services_network.services[0], "cidr_block")
          destination_type  = "SERVICE_CIDR_BLOCK"
          network_entity_id = module.gateways.service_gateway_id
      }]

    },
    {
      route_table_name   = "public"
      create_route_table = true
      display_name       = "OKE Public Route Table (${local.deploy_id})"
      route_rules = [
        {
          description       = "Traffic to/from internet"
          destination       = lookup(local.network_cidrs, "ALL-CIDR")
          destination_type  = "CIDR_BLOCK"
          network_entity_id = module.gateways.internet_gateway_id
      }]
  }]
}

module "security_lists" {
  for_each = { for map in local.security_lists : map.security_list_name => map }
  source   = "./modules/oci-networking/modules/security_list"

  # Oracle Cloud Infrastructure Tenancy and Compartment OCID
  compartment_ocid = local.vcn_compartment_ocid
  vcn_id           = module.vcn.vcn_id

  # Deployment Tags + Freeform Tags + Defined Tags
  security_list_tags = local.oci_tag_values

  # Security List attributes
  security_list_name     = each.value.security_list_name
  create_security_list   = each.value.create_security_list
  display_name           = each.value.display_name
  egress_security_rules  = each.value.egress_security_rules
  ingress_security_rules = each.value.ingress_security_rules
}

locals {
  security_lists = concat(local.security_lists_oke)
  security_lists_oke = [
    {
      security_list_name   = "oke_nodes_security_list"
      create_security_list = true
      display_name         = "OKE Node Workers Security List (${local.deploy_id})"
      egress_security_rules = [
        {
          description      = "Allow pods on one worker node to communicate with pods on other worker nodes"
          destination      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.all_protocols
          stateless        = false
          }, {
          description      = "Worker Nodes access to Internet"
          destination      = lookup(local.network_cidrs, "ALL-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.all_protocols
          stateless        = false
          }, {
          description      = "Allow nodes to communicate with OKE to ensure correct start-up and continued functioning"
          destination      = lookup(data.oci_core_services.all_services_network.services[0], "cidr_block")
          destination_type = "SERVICE_CIDR_BLOCK"
          protocol         = local.security_list_ports.tcp_protocol_number
          stateless        = false

          tcp_options = {
            max = local.security_list_ports.https_port_number
            min = local.security_list_ports.https_port_number
          }
          }, {
          description      = "ICMP Access from Kubernetes Control Plane"
          destination      = lookup(local.network_cidrs, "ALL-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.icmp_protocol_number
          stateless        = false

          icmp_options = {
            type = "3"
            code = "4"
          }
          }, {
          description      = "Access to Kubernetes API Endpoint"
          destination      = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.tcp_protocol_number
          stateless        = false

          tcp_options = {
            max = local.security_list_ports.k8s_api_endpoint_port_number
            min = local.security_list_ports.k8s_api_endpoint_port_number
          }
          }, {
          description      = "Kubernetes worker to control plane communication"
          destination      = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.tcp_protocol_number
          stateless        = false

          tcp_options = {
            max = local.security_list_ports.k8s_worker_to_control_plane_port_number
            min = local.security_list_ports.k8s_worker_to_control_plane_port_number
          }
          }, {
          description      = "Path discovery"
          destination      = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.icmp_protocol_number
          stateless        = false

          icmp_options = {
            type = "3"
            code = "4"
      } }]
      ingress_security_rules = [
        {
          description = "Allow pods on one worker node to communicate with pods on other worker nodes"
          source      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.all_protocols
          stateless   = false
          }, {
          description = "Inbound SSH traffic to worker nodes"
          source      = lookup(local.network_cidrs, (var.cluster_workers_visibility == "Private") ? "VCN-MAIN-CIDR" : "ALL-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.tcp_protocol_number
          stateless   = false

          tcp_options = {
            max = local.security_list_ports.ssh_port_number
            min = local.security_list_ports.ssh_port_number
          }
          }, {
          description = "TCP access from Kubernetes Control Plane"
          source      = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.tcp_protocol_number
          stateless   = false
          }, {
          description = "Path discovery"
          source      = lookup(local.network_cidrs, "ENDPOINT-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.icmp_protocol_number
          stateless   = false

          icmp_options = {
            type = "3"
            code = "4"
          }
      }]
    },
    {
      security_list_name   = "oke_lb_security_list"
      create_security_list = true
      display_name         = "OKE Load Balancer Security List (${local.deploy_id})"
    },
    {
      security_list_name   = "oke_endpoint_security_list"
      create_security_list = true
      display_name         = "OKE K8s API Endpoint Security List (${local.deploy_id})"
      egress_security_rules = [
        {
          description      = "Allow Kubernetes Control Plane to communicate with OKE"
          destination      = lookup(data.oci_core_services.all_services_network.services[0], "cidr_block")
          destination_type = "SERVICE_CIDR_BLOCK"
          protocol         = local.security_list_ports.tcp_protocol_number
          stateless        = false

          tcp_options = {
            max = local.security_list_ports.https_port_number
            min = local.security_list_ports.https_port_number
          }
          }, {
          description      = "All traffic to worker nodes"
          destination      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.tcp_protocol_number
          stateless        = false
          }, {
          description      = "Path discovery"
          destination      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          destination_type = "CIDR_BLOCK"
          protocol         = local.security_list_ports.icmp_protocol_number
          stateless        = false

          icmp_options = {
            type = "3"
            code = "4"
          }
      }]
      ingress_security_rules = [
        {
          description = "External access to Kubernetes API endpoint"
          source      = lookup(local.network_cidrs, (var.cluster_endpoint_visibility == "Private") ? "VCN-MAIN-CIDR" : "ALL-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.tcp_protocol_number
          stateless   = false

          tcp_options = {
            max = local.security_list_ports.k8s_api_endpoint_port_number
            min = local.security_list_ports.k8s_api_endpoint_port_number
          }
          }, {
          description = "Kubernetes worker to Kubernetes API endpoint communication"
          source      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.tcp_protocol_number
          stateless   = false

          tcp_options = {
            max = local.security_list_ports.k8s_api_endpoint_port_number
            min = local.security_list_ports.k8s_api_endpoint_port_number
          }
          }, {
          description = "Kubernetes worker to control plane communication"
          source      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.tcp_protocol_number
          stateless   = false

          tcp_options = {
            max = local.security_list_ports.k8s_worker_to_control_plane_port_number
            min = local.security_list_ports.k8s_worker_to_control_plane_port_number
          }
          }, {
          description = "Path discovery"
          source      = lookup(local.network_cidrs, "NODES-REGIONAL-SUBNET-CIDR")
          source_type = "CIDR_BLOCK"
          protocol    = local.security_list_ports.icmp_protocol_number
          stateless   = false

          icmp_options = {
            type = "3"
            code = "4"
          }
      }]
    }
  ]
  security_list_ports = {
    http_port_number                        = "80"
    https_port_number                       = "443"
    k8s_api_endpoint_port_number            = "6443"
    k8s_worker_to_control_plane_port_number = "12250"
    ssh_port_number                         = "22"
    tcp_protocol_number                     = "6"
    icmp_protocol_number                    = "1"
    all_protocols                           = "all"
  }
}
# VCN Variables
variable "create_new_vcn" {
  default     = true
  description = "Creates a new Virtual Cloud Network (VCN). If false, the VCN must be provided in the variable 'existent_vcn_ocid'."
}
variable "existent_vcn_ocid" {
  default     = ""
  description = "Using existent Virtual Cloud Network (VCN) OCID."
}
variable "existent_vcn_compartment_ocid" {
  default     = ""
  description = "Compartment OCID for existent Virtual Cloud Network (VCN)."
}
variable "vcn_cidr_blocks" {
  default     = "10.20.0.0/16"
  description = "IPv4 CIDR Blocks for the Virtual Cloud Network (VCN). If use more than one block, separate them with comma. e.g.: 10.20.0.0/16,10.80.0.0/16"
}
variable "is_ipv6enabled" {
  default     = false
  description = "Whether IPv6 is enabled for the Virtual Cloud Network (VCN)."
}
variable "ipv6private_cidr_blocks" {
  default     = []
  description = "The list of one or more ULA or Private IPv6 CIDR blocks for the Virtual Cloud Network (VCN)."
}

## OKE Network Visibility (Workers, Endpoint and Load Balancers)
variable "cluster_workers_visibility" {
  default     = "Private"
  description = "The Kubernetes worker nodes that are created will be hosted in public or private subnet(s)"

  validation {
    condition     = var.cluster_workers_visibility == "Private" || var.cluster_workers_visibility == "Public"
    error_message = "Sorry, but cluster visibility can only be Private or Public."
  }
}
variable "cluster_endpoint_visibility" {
  default     = "Public"
  description = "The Kubernetes cluster that is created will be hosted on a public subnet with a public IP address auto-assigned or on a private subnet. If Private, additional configuration will be necessary to run kubectl commands"

  validation {
    condition     = var.cluster_endpoint_visibility == "Private" || var.cluster_endpoint_visibility == "Public"
    error_message = "Sorry, but cluster endpoint visibility can only be Private or Public."
  }
}
variable "cluster_load_balancer_visibility" {
  default     = "Public"
  description = "The Load Balancer that is created will be hosted on a public subnet with a public IP address auto-assigned or on a private subnet. This affects the Kubernetes services, ingress controller and other load balancers resources"

  validation {
    condition     = var.cluster_load_balancer_visibility == "Private" || var.cluster_load_balancer_visibility == "Public"
    error_message = "Sorry, but cluster load balancer visibility can only be Private or Public."
  }
}

locals {
  vcn_compartment_ocid = var.create_new_vcn ? (var.create_new_compartment_for_oke ? local.oke_compartment_ocid : var.compartment_ocid) : var.existent_vcn_compartment_ocid
  vcn_cidr_blocks      = split(",", var.vcn_cidr_blocks)
  network_cidrs = {
    VCN-MAIN-CIDR                 = local.vcn_cidr_blocks[0]                    # e.g.: "10.20.0.0/16" = 65536 usable IPs
    ENDPOINT-REGIONAL-SUBNET-CIDR = cidrsubnet(local.vcn_cidr_blocks[0], 12, 0) # e.g.: "10.20.0.0/28" = 15 usable IPs
    NODES-REGIONAL-SUBNET-CIDR    = cidrsubnet(local.vcn_cidr_blocks[0], 6, 3)  # e.g.: "10.20.12.0/22" = 1021 usable IPs (10.20.12.0 - 10.20.15.255)
    LB-REGIONAL-SUBNET-CIDR       = cidrsubnet(local.vcn_cidr_blocks[0], 6, 4)  # e.g.: "10.20.16.0/22" = 1021 usable IPs (10.20.16.0 - 10.20.19.255)
    PODS-CIDR                     = "10.244.0.0/16"
    KUBERNETES-SERVICE-CIDR       = "10.96.0.0/16"
    ALL-CIDR                      = "0.0.0.0/0"
  }
}

## Available Services
data "oci_core_services" "all_services_network" {
  filter {
    name   = "name"
    values = ["All .* Services In Oracle Services Network"]
    regex  = true
  }
}
